// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Example
{
    [System.Serializable()]
    public partial class KVMessage
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVMessage Deserialize(Stream stream)
        {
            KVMessage instance = new KVMessage();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVMessage DeserializeLengthDelimited(Stream stream)
        {
            KVMessage instance = new KVMessage();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVMessage DeserializeLength(Stream stream, int length)
        {
            KVMessage instance = new KVMessage();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static KVMessage Deserialize(byte[] buffer)
        {
            KVMessage instance = new KVMessage();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.KVMessage Deserialize(byte[] buffer, Example.KVMessage instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.KVMessage Deserialize(Stream stream, Example.KVMessage instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Len = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Request == null)
                        instance.Request = Example.KVRequest.DeserializeLengthDelimited(stream);
                    else
                        Example.KVRequest.DeserializeLengthDelimited(stream, instance.Request);
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    if (instance.Response == null)
                        instance.Response = Example.KVResponse.DeserializeLengthDelimited(stream);
                    else
                        Example.KVResponse.DeserializeLengthDelimited(stream, instance.Response);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVMessage DeserializeLengthDelimited(Stream stream, Example.KVMessage instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Len = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Request == null)
                        instance.Request = Example.KVRequest.DeserializeLengthDelimited(stream);
                    else
                        Example.KVRequest.DeserializeLengthDelimited(stream, instance.Request);
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    if (instance.Response == null)
                        instance.Response = Example.KVResponse.DeserializeLengthDelimited(stream);
                    else
                        Example.KVResponse.DeserializeLengthDelimited(stream, instance.Response);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVMessage DeserializeLength(Stream stream, int length, Example.KVMessage instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 Varint
                case 16:
                    instance.Len = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Request == null)
                        instance.Request = Example.KVRequest.DeserializeLengthDelimited(stream);
                    else
                        Example.KVRequest.DeserializeLengthDelimited(stream, instance.Request);
                    continue;
                    // Field 4 LengthDelimited
                case 34:
                    if (instance.Response == null)
                        instance.Response = Example.KVResponse.DeserializeLengthDelimited(stream);
                    else
                        Example.KVResponse.DeserializeLengthDelimited(stream, instance.Response);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, KVMessage instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Len);
            if (instance.Request != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿using (var ms3 = new MemoryStream())
                {
                    Example.KVRequest.Serialize(ms3, instance.Request);
                    // Length delimited byte array
                    uint ms3Length = (uint)ms3.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms3Length);
                    stream.Write(ms3.GetBuffer(), 0, (int)ms3Length);
                }
                
            }
            if (instance.Response != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿using (var ms4 = new MemoryStream())
                {
                    Example.KVResponse.Serialize(ms4, instance.Response);
                    // Length delimited byte array
                    uint ms4Length = (uint)ms4.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms4Length);
                    stream.Write(ms4.GetBuffer(), 0, (int)ms4Length);
                }
                
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(KVMessage instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    [System.Serializable()]
    public partial class KVResponse
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVResponse Deserialize(Stream stream)
        {
            KVResponse instance = new KVResponse();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVResponse DeserializeLengthDelimited(Stream stream)
        {
            KVResponse instance = new KVResponse();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVResponse DeserializeLength(Stream stream, int length)
        {
            KVResponse instance = new KVResponse();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static KVResponse Deserialize(byte[] buffer)
        {
            KVResponse instance = new KVResponse();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.KVResponse Deserialize(byte[] buffer, Example.KVResponse instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.KVResponse Deserialize(Stream stream, Example.KVResponse instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Status = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVResponse DeserializeLengthDelimited(Stream stream, Example.KVResponse instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Status = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVResponse DeserializeLength(Stream stream, int length, Example.KVResponse instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Status = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Message = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, KVResponse instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Status);
            if (instance.Message != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Message));
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(KVResponse instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    [System.Serializable()]
    public partial class KVRequest
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVRequest Deserialize(Stream stream)
        {
            KVRequest instance = new KVRequest();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVRequest DeserializeLengthDelimited(Stream stream)
        {
            KVRequest instance = new KVRequest();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVRequest DeserializeLength(Stream stream, int length)
        {
            KVRequest instance = new KVRequest();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static KVRequest Deserialize(byte[] buffer)
        {
            KVRequest instance = new KVRequest();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.KVRequest Deserialize(byte[] buffer, Example.KVRequest instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.KVRequest Deserialize(Stream stream, Example.KVRequest instance)
        {
            instance.Type = Example.KVRequest.RequestType.ITEM;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = (Example.KVRequest.RequestType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Item == null)
                        instance.Item = Example.KVItem.DeserializeLengthDelimited(stream);
                    else
                        Example.KVItem.DeserializeLengthDelimited(stream, instance.Item);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Login == null)
                        instance.Login = Example.KVLogin.DeserializeLengthDelimited(stream);
                    else
                        Example.KVLogin.DeserializeLengthDelimited(stream, instance.Login);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVRequest DeserializeLengthDelimited(Stream stream, Example.KVRequest instance)
        {
            instance.Type = Example.KVRequest.RequestType.ITEM;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = (Example.KVRequest.RequestType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Item == null)
                        instance.Item = Example.KVItem.DeserializeLengthDelimited(stream);
                    else
                        Example.KVItem.DeserializeLengthDelimited(stream, instance.Item);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Login == null)
                        instance.Login = Example.KVLogin.DeserializeLengthDelimited(stream);
                    else
                        Example.KVLogin.DeserializeLengthDelimited(stream, instance.Login);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVRequest DeserializeLength(Stream stream, int length, Example.KVRequest instance)
        {
            instance.Type = Example.KVRequest.RequestType.ITEM;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                case 8:
                    instance.Type = (Example.KVRequest.RequestType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    if (instance.Item == null)
                        instance.Item = Example.KVItem.DeserializeLengthDelimited(stream);
                    else
                        Example.KVItem.DeserializeLengthDelimited(stream, instance.Item);
                    continue;
                    // Field 3 LengthDelimited
                case 26:
                    if (instance.Login == null)
                        instance.Login = Example.KVLogin.DeserializeLengthDelimited(stream);
                    else
                        Example.KVLogin.DeserializeLengthDelimited(stream, instance.Login);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, KVRequest instance)
        {
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Type);
            if (instance.Item != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿using (var ms2 = new MemoryStream())
                {
                    Example.KVItem.Serialize(ms2, instance.Item);
                    // Length delimited byte array
                    uint ms2Length = (uint)ms2.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms2Length);
                    stream.Write(ms2.GetBuffer(), 0, (int)ms2Length);
                }
                
            }
            if (instance.Login != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿using (var ms3 = new MemoryStream())
                {
                    Example.KVLogin.Serialize(ms3, instance.Login);
                    // Length delimited byte array
                    uint ms3Length = (uint)ms3.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, ms3Length);
                    stream.Write(ms3.GetBuffer(), 0, (int)ms3Length);
                }
                
            }
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(KVRequest instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    [System.Serializable()]
    public partial class KVItem
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVItem Deserialize(Stream stream)
        {
            KVItem instance = new KVItem();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVItem DeserializeLengthDelimited(Stream stream)
        {
            KVItem instance = new KVItem();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVItem DeserializeLength(Stream stream, int length)
        {
            KVItem instance = new KVItem();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static KVItem Deserialize(byte[] buffer)
        {
            KVItem instance = new KVItem();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.KVItem Deserialize(byte[] buffer, Example.KVItem instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.KVItem Deserialize(Stream stream, Example.KVItem instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVItem DeserializeLengthDelimited(Stream stream, Example.KVItem instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVItem DeserializeLength(Stream stream, int length, Example.KVItem instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Command = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, KVItem instance)
        {
            if (instance.Command == null)
                throw new ArgumentNullException("Command", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Command));
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(KVItem instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
    [System.Serializable()]
    public partial class KVLogin
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVLogin Deserialize(Stream stream)
        {
            KVLogin instance = new KVLogin();
            Deserialize(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVLogin DeserializeLengthDelimited(Stream stream)
        {
            KVLogin instance = new KVLogin();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }
        
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static KVLogin DeserializeLength(Stream stream, int length)
        {
            KVLogin instance = new KVLogin();
            DeserializeLength(stream, length, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static KVLogin Deserialize(byte[] buffer)
        {
            KVLogin instance = new KVLogin();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.KVLogin Deserialize(byte[] buffer, Example.KVLogin instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }
        
        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.KVLogin Deserialize(Stream stream, Example.KVLogin instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVLogin DeserializeLengthDelimited(Stream stream, Example.KVLogin instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.KVLogin DeserializeLength(Stream stream, int length, Example.KVLogin instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if(stream.Position == limit)
                        break;
                    else
                        throw new InvalidOperationException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                case 10:
                    instance.Username = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                    // Field 2 LengthDelimited
                case 18:
                    instance.Password = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                    continue;
                }
                
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);
                
                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                case 0:
                    throw new Exception("Invalid field id: 0, something went wrong in the stream");
                default:
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                    break;
                }
            }
            
            return instance;
        }
        
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, KVLogin instance)
        {
            if (instance.Username == null)
                throw new ArgumentNullException("Username", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Username));
            if (instance.Password == null)
                throw new ArgumentNullException("Password", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Password));
        }
        
        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(KVLogin instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
    }
    
}
